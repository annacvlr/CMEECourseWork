Starting code feedback for Anna, Week2

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 1.62 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: week3, .git, week2, Feedback, week1

Found the following files in parent directory: README.md

Checking for key files in parent directory...

.gitignore missing, 1 pt deducted

Current Points = 99

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
## My CMEE bootcamp Course Work

## Description
- Week 1 covered Shell Scripting bash and Git Version Control.
- Week 2 covered Python in general including: variables, data structures, loops, conditionals, comprehensions, functions, docstrings and debugging.

## Languages 
- shell script
- plain txt
- Python

## Dependencies
**ipdb** : for enhanced debugging.

## Installation
pip install ipdb

## Project Structure and Usage
- Code: Contains script files.
- Data: Where all the data used has been collected.
- Results: Contains the results.


## Author
   Anna Cavalieri Canosa
    	ac524@ic.ac.uk



**********************************************************************

======================================================================
Looking for the weekly directories...

Found 3 weekly directories: week1, week2, week3

The Week2 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK2...

Found the following directories: code, data, results

Found the following files: README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# CMEE bootcamp Week2
Week 2 coursework of the Biological Computating Bootcamp

## Description
Week 2 covered Python in general including: variables, data structures, loops, conditionals, comprehensions, functions, docstrings and debugging.

## Languages 
Python
    
## Dependencies
**ipdb** : for enhanced debugging

  

## Installation
pip install ipdb
    

## Project Structure and Usage
- Code: Contains Python files
- Data: Where all the data used has been collected
- Results: Contains the results from the code. 

## Author
   Anna Cavalieri Canosa
    	ac524@ic.ac.uk



**********************************************************************

Found following files in results directory: alignment.txt...

Ideally, Results directory should be empty other than, perhaps a .gitkeep. 

 0.5 pts deducted per results file 

Current Points = 98.5

Found 21 code files: cfexercises1.py, basic_io1.py, basic_csv.py, sysargv.py, cfexercises2.py, basic_io2.py, MyExampleScript.py, basic_io3.py, boilerplate.py, test_control_flow.py, control_flow.py, loops.py, oaks_debugme.py, align_seqs.py, lc2.py, oaks.py, debugme.py, lc1.py, tuple.py, using_name.py, dictionary.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file cfexercises1.py...

File contents are:

**********************************************************************


__author__ = 'Anna Cavalieri (ac524@ic.ac.uk)'
__version__ = '0.01'

import sys
import doctest


#define the functions first
def foo_1(x):
    """ find the Sqrt

    >>> foo_1(9)
    3.0

    """
    return x ** 0.5



def foo_2(x, y):
    """ find which number is bigger

    >>> foo_2(10,20)
    20

    """

    if x > y:
        return x
    return y

foo_2(3,5)


def foo_3(x, y, z):
    """ give the numbers in order

    >>> foo_3(10,20,5)
    [5, 10, 20]

    """
    if x > y:
        tmp = y
        y = x
        x = tmp
    if y > z:
        tmp = z
        z = y
        y = tmp
    if x > y:
        tmp = x
        x = y
        y = tmp
    return [x, y, z]

def foo_4(x):
    """ give the factorial

    >>> foo_4(5)
    120
    
    """
    result = 1
    for i in range(1, x + 1):
        result = result * i
    return result

def foo_5(x): # a recursive function that calculates the factorial of x
    """ give the factorial of x

    >>> foo_5(5)
    120

    """
    result = 1
    for i in range(1, x + 1):
        result = result * i
    return result
    if x == 1:
        return 1
    return x * foo_5(x - 1)
     
def foo_6(x): # Calculate the factorial of x in a different way; no if statement involved
    """ give the factorial of x

    >>> foo_6(5)
    120
    
    """
    result = 1
    for i in range(1, x + 1):
        result = result * i
    return result
    if x == 1:
        return 1
    return x * foo_5(x - 1)
    facto = 1
    while x >= 1:
        facto = facto * x
        x = x - 1
    return facto


""" define main & create user inputs for each function """

def main(argv):
    print("Test with argument 10:")
    print("foo_1(10):", foo_1(10))
    print("foo_2(10):", foo_2(10,20))
    print("foo_3(10):", foo_3(10,20,30))
    print("foo_4(10):", foo_4(10))
    print("foo_5(10):", foo_5(10))
    print("foo_6(10):", foo_6(10))

    #FOR THE USER TO ACTUALLY INPUT STUFF THE FOLLOWING CODE WOULD WORK FOR EACH FUCNTION
    #try:
       # user_input = float(input("enter a number for factorial calculations:"))
       # print("foo_1:", foo_1(user_input))


       # x = float(input ("Enter first number for foo_2:  "))
        #y = float(input("Enter second number for foo_2:  "))

        #print("foo_2:", foo_2(x, y))


        #x2 = float(input ("Enter first number for foo_3:  "))
        #y2 = float(input("Enter second number for foo_3:  "))
        #2 = float(input("Enter thrid number for foo_3:  "))
        #print("foo_3:", foo_3(x2, y2, z2))  # Use user_input as z

        #user_input4 = float(input("enter a number for factorial calculations:"))
        #print("foo_4:", foo_4(int(user_input4)))


        #user_input5 = float(input("enter a number for factorial calculations:"))
        #print("foo_5:", foo_5(int(user_input5)))


        #user_input6 = float(input("enter a number for factorial calculations:"))
        #print("foo_6:", foo_6(int(user_input6)))

 
    #except ValueError:
     #   print("Please enter a valid number.")
      #  return 1

    return 0



doctest.testmod()



if(__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)

**********************************************************************

Testing cfexercises1.py...

cfexercises1.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 98.0

Output (only first 500 characters): 


**********************************************************************
Test with argument 10:
foo_1(10): 3.1622776601683795
foo_2(10): 20
foo_3(10): [10, 20, 30]
foo_4(10): 3628800
foo_5(10): 3628800
foo_6(10): 3628800

**********************************************************************

Code ran without errors

Time consumed = 0.08994s

======================================================================
Inspecting script file basic_io1.py...

File contents are:

**********************************************************************

"""script reads a text file line by line printing each line, 
    the second part skips blank lines
    """


#open a file to read
f = open('../Documents/CMEECourseWork/week2/sandbox/test.txt', 'r')
# use "implicit" for loop:
# if the object is a file, python will cycle over lines
for line in f:
    print(line)

# close the file
f.close()

# Same example, skip blank lines
f = open('../Documents/CMEECourseWork/week2/sandbox/test.txt', 'r')
for line in f:
    if len(line.strip()) > 0:
        print(line)

f.close()





# Open a file for reading
with open('../sandbox/test.txt', 'r') as f:
    # use "implicit" for loop:
    # if the object is a file, python will cycle over lines
    for line in f:
        print(line)

# Once you drop out of the with, the file is automatically closed

# Same example, skip blank lines
with open('../sandbox/test.txt', 'r') as f:
    for line in f:
        if len(line.strip()) > 0:
            print(line)
**********************************************************************

Testing basic_io1.py...

basic_io1.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 98.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2024-25/Coursework/StudentRepos/AnnaCanosa_ac524/week2/code/basic_io1.py", line 8, in <module>
    f = open('../Documents/CMEECourseWork/week2/sandbox/test.txt', 'r')
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '../Documents/CMEECourseWork/week2/sandbox/test.txt'

======================================================================
Inspecting script file basic_csv.py...

File contents are:

**********************************************************************
import csv
# csv module permits reading and writing to CSV files
""" read a csv file with species data, process each row to extract specoes name & create a new CSV file 
    called bodymass.csv with species name and body mass
"""


with open('../Documents/CMEECourseWork/week2/data/testcsv.csv','r') as f:
    csvread = csv.reader(f)
#open the testcsv.csv & read it 


temp =[]
for row in csvread:
    temp.append(tuple(row))
    print(row)
    print("the species is", row[0])
#loop iterating over each row - each row is converted to a tuple & appended to temp list
#prints first element (species name) and entire row

    
with open('../Documents/CMEECourseWork/week2/data/testcsv.csv','r') as f:
    with open('../Documents/CMEECourseWork/week2/data/bodymass.csv','w') as g:

        csvread = csv.reader(f)
        csvwrite = csv.writer(g)
        for row in csvread:
            print(row)
            csvwrite.writerow([row[0], row[4]])

#opens testcsv.csv (reading r) and bodymass.csv (writing w)
# creates writer object to write a new file 
#
**********************************************************************

Testing basic_csv.py...

basic_csv.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 98.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2024-25/Coursework/StudentRepos/AnnaCanosa_ac524/week2/code/basic_csv.py", line 8, in <module>
    with open('../Documents/CMEECourseWork/week2/data/testcsv.csv','r') as f:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '../Documents/CMEECourseWork/week2/data/testcsv.csv'

======================================================================
Inspecting script file sysargv.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
import sys
print("This is the name of the script:", sys.argv[0])
print("Number of arguments:", len(sys.argv))
print("the arguments are:", str(sys.argv))

**********************************************************************

Testing sysargv.py...

sysargv.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 96.0

Output (only first 500 characters): 


**********************************************************************
This is the name of the script: sysargv.py
Number of arguments: 1
the arguments are: ['sysargv.py']

**********************************************************************

Code ran without errors

Time consumed = 0.02185s

======================================================================
Inspecting script file cfexercises2.py...

File contents are:

**********************************************************************
def hello_1 (x):
    for j in range(x):
        if j % 3 ==0:
            print('hello')
    print('')

hello_1(12)
# range of numbers from 0 to 11. itll print only los q son dividibles por 3.



def hello_2(x):
    for j in range(x):
        if j % 5 == 3:
            print('hello')
        elif j % 4 == 3:
            print('hello')
    print(' ')

hello_2(12)


def hello_3(x,y):
    for i in range(x,y):
        print('hello')
    print('')
hello_3(3,17)


def hello_4(x):
    while x != 15:
        print('hello')
        x = x + 3
    print(' ')

hello_4(0)


def hello_5(x):
    while x < 100:
        if x==31:
            for k in range(7):
                print('hello')
        elif x== 18:
            print ('hello')
        x = x+1
    print ('')

hello_5(12)



def hello_6(x,y):
    while x: 
        print("hello!" + str(y))
        y+= 1 
        if y == 6:
            break
    print ('')
hello_6 (True,0)




x = [i for i in range(10)]
print(x)

#estos dos son lo mismo (arriba y abajo)

x = []
for i in range(10):
    x.append(i)
print(x)

rint(x)
#y tambien estos dos son iguales 
x=["LIST","COMPREHENSIONS","ARE","COOL"]
x_new=[]
for i in x:
    x_new.append(i.lower())
print(x_new)

x=[i.lower() for i in ["LIST", "COMPREHENSIONS", "ARE","COOL"]]
print(x)
#y tambien estos dos son iguales 
x=["LIST","COMPREHENSIONS","ARE","COOL"]
x_new=[]
for i in x:
    x_new.append(i.lower())
print(x_new)


#nested loop
matrix=[[1,2,3],[4,5,6],[7,8,9]]
flattened_matrix=[]
#matrix
for row in matrix: #goes thru each row
    for n in row: #goes thru each column
        flattened_matrix.append(n)
print(flattened_matrix)

matrix = [[1,2,3],[4,5,6],[7,8,9]]
flattened_matrix = [n for row in matrix for n in row]
print(flattened_matrix)


flatten_matrix = [n #append
                  for row in matrix
                  for n in row]


words = ["these", "are", "some", "words"]
first_letters= set()
for w in words:
    first_letters.add(w[0])
print(first_letters)
type(first_letters)


words=["these", "are", "some", "words"]
first_letters = {w[0] for w in words}
print(first_letters)
type(first_letters)
**********************************************************************

Testing cfexercises2.py...

cfexercises2.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 91.0

Output (only first 500 characters): 


**********************************************************************
hello
hello
hello
hello

hello
hello
hello
hello
 
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello

hello
hello
hello
hello
hello
 
hello
hello
hello
hello
hello
hello
hello
hello

hello!0
hello!1
hello!2
hello!3
hello!4
hello!5

[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2024-25/Coursework/StudentRepos/AnnaCanosa_ac524/week2/code/cfexercises2.py", line 75, in <module>
    rint(x)
    ^^^^
NameError: name 'rint' is not defined. Did you mean: 'print'?

======================================================================
Inspecting script file basic_io2.py...

File contents are:

**********************************************************************

#############################
# FILE OUTPUT
#############################
# Save the elements of a list to a file
list_to_save = range(100)

f = open('../Documents/CMEECourseWork/week2/sandbox/test.txt','w')
for i in list_to_save:
    f.write(str(i) + '\n') ## Add a new line at the end

f.close()

**********************************************************************

Testing basic_io2.py...

basic_io2.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 89.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2024-25/Coursework/StudentRepos/AnnaCanosa_ac524/week2/code/basic_io2.py", line 8, in <module>
    f = open('../Documents/CMEECourseWork/week2/sandbox/test.txt','w')
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '../Documents/CMEECourseWork/week2/sandbox/test.txt'

======================================================================
Inspecting script file MyExampleScript.py...

File contents are:

**********************************************************************
def foo(x):
    x *= x
    print (x)
foo(2)

**********************************************************************

Testing MyExampleScript.py...

MyExampleScript.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 86.5

Output (only first 500 characters): 


**********************************************************************
4

**********************************************************************

Code ran without errors

Time consumed = 0.02266s

======================================================================
Inspecting script file basic_io3.py...

File contents are:

**********************************************************************
#############################
# STORING OBJECTS
#############################
# To save an object (even complex) for later use
my_dictionary = {"a key": 10, "another key": 11}

import pickle

f = open('../sandbox/test.txt,'wb') ## note the b: accept binary files
pickle.dump(my_dictionary, f)
f.close()

## Load the data again
f = open('../sandbox/test.txt','rb')
another_dictionary = pickle.load(f)
f.close()

print(another_dictionary)



########## what is testp.p???

with open('../Documents/CMEECourseWork/week2/sandbox/test.txt', "r") as myfile:
    # do things to myfile
    ...
    
**********************************************************************

Testing basic_io3.py...

basic_io3.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 84.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2024-25/Coursework/StudentRepos/AnnaCanosa_ac524/week2/code/basic_io3.py", line 9
    f = open('../sandbox/test.txt,'wb') ## note the b: accept binary files
                                     ^
SyntaxError: unterminated string literal (detected at line 9)

======================================================================
Inspecting script file boilerplate.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Description of this program or application
"""

__appname__ = ' [application name here] '
__author__ = 'Anna Cavalieri (ac524@ic.ac.uk)'
__version__ = '0.01'
__license__ = 'license for this code/program'

##imports
import sys

def main(argv):
    """ main entry point of program"""
    print('This is a boilerplate')
    return 0

if __name__ == "__main__":
    """make sure main function called from command line"""
    status = main(sys.argv)
    sys.exit(status)
**********************************************************************

Testing boilerplate.py...

boilerplate.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 84.5

Output (only first 500 characters): 


**********************************************************************
This is a boilerplate

**********************************************************************

Code ran without errors

Time consumed = 0.02765s

======================================================================
Inspecting script file test_control_flow.py...

File contents are:

**********************************************************************

"""Description of this program or application
"""
__author__ = 'Anna Cavalieri (ac524@ic.ac.uk)'
__version__ = '0.01'

##imports
import sys
import doctest


def even_or_odd(x=0):
    """find whether a number is even/odd
    >>> even_or_odd(10)
    '10 is Even!'

    >>> even_or_odd(5)
    '5 is Odd!'

    in case of negative numbers, the positive is taken:    
    >>> even_or_odd(-2)
    '-2 is Even!'
    
    """

    if x % 2==0:
        return f"{x} is Even!"
    return f"{x} is Odd!"

def main (argv):
    print(even_or_odd(22))
    print(even_or_odd(33))
    return 0


if(__name__ == "__main__"):
    status = main(sys.argv)

doctest.testmod()

#f"test string{variable} -- best incorporating variables in a string 
**********************************************************************

Testing test_control_flow.py...

test_control_flow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 84.0

Output (only first 500 characters): 


**********************************************************************
22 is Even!
33 is Odd!

**********************************************************************

Code ran without errors

Time consumed = 0.07940s

======================================================================
Inspecting script file control_flow.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Description of this program or application
"""

__appname__ = ' [application name here] '
__author__ = 'Anna Cavalieri (ac524@ic.ac.uk)'
__version__ = '0.01'
__license__ = 'license for this code/program'

##imports
import sys



def even_or_odd(x=0):
    """find whether a number is even?odd"""
    if x % 2==0:
        return f"{x} is Even"
    return f"{x} is Odd"


"""find which is the largest divisor of x among 2,3,4,5."""
def largest_divisor_five (x=120):
   
    largest = 0 
    if x % 5 == 0:
        largest = 5
    elif x % 4 ==0: #else if 
        largest = 4
    elif x % 3 == 0:
        largest = 3
    elif x % 2 ==0:
        largest = 2
    else: #when all if elf conditions are not met 
        return f"No divisor found for {x}"  #each function can return a value/variable"
    return f"the largest divisor of {x} is {largest}"



""" find if number is prime"""
def is_prime (x=70):
    for i in range(2,x): 
        if x % i == 0:
            print(f"{x} is not a prime: {i} is a divisor")
            return False
    print (f"{x} is a prime")
    return True

"""find all primes up to x"""
def find_all_primes(x=22):
    allprimes = []
    for i in range(2, x+1):
        if is_prime(i):
            allprimes.append(i)
    print(f"There are {len(allprimes)} primes between 2 and {x}")
    return allprimes

def main(argv):
    print(even_or_odd(22))
    print(even_or_odd(33))
    print(largest_divisor_five(120))
    print(largest_divisor_five(121))
    print(is_prime(60))
    print(is_prime(59))
    print(find_all_primes(100))
    return 0

if(__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)

#f"test string{variable} -- best incorporating variables in a string 
**********************************************************************

Testing control_flow.py...

control_flow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 83.5

Output (only first 500 characters): 


**********************************************************************
22 is Even
33 is Odd
the largest divisor of 120 is 5
No divisor found for 121
60 is not a prime: 2 is a divisor
False
59 is a prime
True
2 is a prime
3 is a prime
4 is not a prime: 2 is a divisor
5 is a prime
6 is not a prime: 2 is a divisor
7 is a prime
8 is not a prime: 2 is a divisor
9 is not a prime: 3 is a divisor
10 is not a prime: 2 is a divisor
11 is a prime
12 is not a prime: 2 is a divisor
13 is a prime
14 is not a prime: 2 is a divisor
15 is not a prime: 3 is a divisor
16 is not a prim
**********************************************************************

Code ran without errors

Time consumed = 0.02249s

======================================================================
Inspecting script file loops.py...

File contents are:

**********************************************************************
#FOR loops 
for i in range(5):
    print(i)

my_list = [0,2, "geronimo!", 3.0, True, False]
for k in my_list:
    print(k)



#WHILE loops
z=0
while z < 100:
    z=z+1
    print(z)

**********************************************************************

Testing loops.py...

loops.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 81.5

Output (only first 500 characters): 


**********************************************************************
0
1
2
3
4
0
2
geronimo!
3.0
True
False
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100

**********************************************************************

Code ran without errors

Time consumed = 0.02315s

======================================================================
Inspecting script file oaks_debugme.py...

File contents are:

**********************************************************************
import csv
import sys
import ipdb
import doctest
#Define function
def is_an_oak(name):
    """
    >>> is_an_oak('Fraxinus')
    False

    >>> is_an_oak('Quercus')
    True
    """
    """ Returns True if name is starts with 'quercus' """
    return name.lower() == 'quercus'
   

def main(argv): 
    with open('../data/TestOaksData.csv','r') as f, open('../data/JustOaksData.csv','w') as g:
        taxa = csv.reader(f)
        csvwrite = csv.writer(g)
        next(taxa)
        oaks = set()
        for row in taxa:
            #import ipdb; ipdb.set_trace()
            print(row)
            print ("The genus is: ") 
            print(row[0] + '\n')
            if is_an_oak(row[0]):
                print('FOUND AN OAK!\n')
                csvwrite.writerow([row[0], row[1]])
            else:
                print("False"+'\n')

            

    return 0
    
if (__name__ == "__main__"):
    status = main(sys.argv)

doctest.testmod(verbose=True)



#####Modify your doctests approriately, and modify your script such that it can handle cases where there is a typo (such as ‘Quercuss’) or there is a genus name that is not strictly ‘Quercus’.??????????
**********************************************************************

Testing oaks_debugme.py...

oaks_debugme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 81.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2024-25/Coursework/StudentRepos/AnnaCanosa_ac524/week2/code/oaks_debugme.py", line 3, in <module>
    import ipdb
ModuleNotFoundError: No module named 'ipdb'

======================================================================
Inspecting script file align_seqs.py...

File contents are:

**********************************************************************
"""script to determine the best alignment of sequence 1 with sequence 2, and its score """
import csv
import doctest

# Assign the longer sequence s1, and the shorter to s2
# l1 is length of the longest, l2 that of the shortest
def read_sequences():
    with open('../data/sequences.csv','r') as file:
        read = csv.DictReader(file)
        for row in read:
            return row['seq1'], row['seq2']

seq1, seq2 = read_sequences()       
seq2
#seq1
#test if seq1 is right


"""Order the longest sequence to stay infront"""

l1 = len(seq1)
l2 = len(seq2)
if l1 >= l2: #if seq1 is longer keep it there
    s1 = seq1
    s2 = seq2
else: #if seq2 is longer swap the two
    s1 = seq2
    s2 = seq1
    l1, l2 = l2, l1 


#test that s1 is the longest sequence
#s1
#s2

# A function that computes a score by returning the number of matches starting
# from arbitrary startpoint (chosen by user)

"""function that aligns the sequences and compares the counts"""
def calculate_score(s1, s2, l1, l2, startpoint):
    matched = "" # to hold string displaying alignements
    score = 0 #starts at zero and counts the number of matching bases
    for i in range(l2): #go thru the range of s2 (which is l2 long)
        if (i + startpoint) < l1: # match within s1 length (l1)
            if s1[i + startpoint] == s2[i]: # if the bases match
                matched = matched + "*"
                score = score + 1
            else:
                matched = matched + "-"

    # some formatted output
    #print("." * startpoint + matched)           
    #print("." * startpoint + s2)
    #print(s1)
    #print(score) 
    #print(" ")

    return score

# Test the function with some example starting points:
# calculate_score(s1, s2, l1, l2, 0)
# calculate_score(s1, s2, l1, l2, 1)
# calculate_score(s1, s2, l1, l2, 5)

# now try to find the best match (highest score) for the two sequences
my_best_align = None
my_best_score = -1

for i in range(l1): # Note that you just take the last alignment with the highest score
    z = calculate_score(s1, s2, l1, l2, i)
    if z > my_best_score:
        my_best_align = "." * i + s2 # think about what this is doing!
        my_best_score = z 
print(my_best_align)
print(s1)
print("Best score:", my_best_score)


with open('../results/alignment.txt', 'w' ) as f:
    f.write("My best align is:" + my_best_align + '\n')
    f.write( s1 + '\n')
    f.write(f"best score: {my_best_score}")


**********************************************************************

Testing align_seqs.py...

align_seqs.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 81.0

Output (only first 500 characters): 


**********************************************************************
CAATTCGGAT
ATCGCCGGATTACGGG
Best score: 5

**********************************************************************

Code ran without errors

Time consumed = 0.05760s

======================================================================
Inspecting script file lc2.py...

File contents are:

**********************************************************************
# Average UK Rainfall (mm) for 1910 by month
# http://www.metoffice.gov.uk/climate/uk/datasets
rainfall = (('JAN',111.4),
            ('FEB',126.1),
            ('MAR', 49.9),
            ('APR', 95.3),
            ('MAY', 71.8),
            ('JUN', 70.2),
            ('JUL', 97.1),
            ('AUG',140.2),
            ('SEP', 27.0),
            ('OCT', 89.4),
            ('NOV',128.4),
            ('DEC',142.2),
           )

# (1) Use a list comprehension to create a list of month,rainfall tuples where
# the amount of rain was greater than 100 mm.
""" Make a list w the month and the amount of rain, where rain was above 100mm. use a for and an if"""
rainy_months = [(month, rain) for month, rain in rainfall if rain >100]
print("Each month had the following mm of rainfall above 100mm:", rainy_months)

 
# (2) Use a list comprehension to create a list of just month names where the
# amount of rain was less than 50 mm. 

not_rainy_months = [(month, rain) for month, rain in rainfall if rain <50]
print("Each month had the following mm of rainfall below 50mm:", not_rainy_months)


# (3) Now do (1) and (2) using conventional loops (you can choose to do 
# this before 1 and 2 !). 

rainy_months1 = []
for month,rain in rainfall:
    if rain > 100:
        rainy_months1.append((month, rain))
print ("Each month had the following mm of rainfall above 100mm:", rainy_months1)

not_rainy_months1 = []
for month,rain in rainfall:
    if rain <50 :
        not_rainy_months1.append((month, rain))
print ("Each month had the following mm of rainfall below 50mm:", not_rainy_months1)



# A good example output is:
#
# Step #1:
# Months and rainfall values when the amount of rain was greater than 100mm:
# [('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
# ... etc.


**********************************************************************

Testing lc2.py...

lc2.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 81.0

Output (only first 500 characters): 


**********************************************************************
Each month had the following mm of rainfall above 100mm: [('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
Each month had the following mm of rainfall below 50mm: [('MAR', 49.9), ('SEP', 27.0)]
Each month had the following mm of rainfall above 100mm: [('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
Each month had the following mm of rainfall below 50mm: [('MAR', 49.9), ('SEP', 27.0)]

**********************************************************************

Code ran without errors

Time consumed = 0.03736s

======================================================================
Inspecting script file oaks.py...

File contents are:

**********************************************************************
taxa = [ 'Quercus robur',
         'Fraxinus excelsior',
         'Pinus sylvestris',
         'Quercus cerris',
         'Quercus petraea',
       ]

def is_an_oak(name):
    return name.lower().startswith('quercus ')

oaks_loops =set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species)
print(oaks_loops)

oaks_lc=set([species for species in taxa if is_an_oak(species)])
print(oaks_lc)


#as a for loop
oaks_loops=set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species.upper())
print(oaks_loops)

#as a list comprehension
oaks_lc= set([species.upper() for species in taxa if is_an_oak(species)])
print(oaks_lc)


**********************************************************************

Testing oaks.py...

oaks.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 78.5

Output (only first 500 characters): 


**********************************************************************
{'Quercus cerris', 'Quercus petraea', 'Quercus robur'}
{'Quercus cerris', 'Quercus petraea', 'Quercus robur'}
{'QUERCUS CERRIS', 'QUERCUS PETRAEA', 'QUERCUS ROBUR'}
{'QUERCUS CERRIS', 'QUERCUS PETRAEA', 'QUERCUS ROBUR'}

**********************************************************************

Code ran without errors

Time consumed = 0.03196s

======================================================================
Inspecting script file debugme.py...

File contents are:

**********************************************************************
def buggyfunc(x):
    y = x
    for i in range(x):
        try:
            y = y - 1
                    #import ipdb; ipdb.set.track
            z = x/y
        except ZeroDivisionError:
            print(f" The result of dividing a number by zero is undefined")
        except:
            print(f"this didn't work; {x= }; {y = }")
        else:
            print(f"OK; {x =}, {y = }, {z = }")
    return z

buggyfunc(20)

**********************************************************************

Testing debugme.py...

debugme.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 76.0

Output (only first 500 characters): 


**********************************************************************
OK; x =20, y = 19, z = 1.0526315789473684
OK; x =20, y = 18, z = 1.1111111111111112
OK; x =20, y = 17, z = 1.1764705882352942
OK; x =20, y = 16, z = 1.25
OK; x =20, y = 15, z = 1.3333333333333333
OK; x =20, y = 14, z = 1.4285714285714286
OK; x =20, y = 13, z = 1.5384615384615385
OK; x =20, y = 12, z = 1.6666666666666667
OK; x =20, y = 11, z = 1.8181818181818181
OK; x =20, y = 10, z = 2.0
OK; x =20, y = 9, z = 2.2222222222222223
OK; x =20, y = 8, z = 2.5
OK; x =20, y = 7, z = 2.857142857142857
OK;
**********************************************************************

Code ran without errors

Time consumed = 0.03705s

======================================================================
Inspecting script file lc1.py...

File contents are:

**********************************************************************
birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
         )
#(1) Write three separate list comprehensions that create three different
# lists containing the latin names, common names and mean body masses for
# each species in birds, respectively. 

"""make 3 different lists from this one tuple
    1) using list comprehension
    2) using for loops """


latinspecies= [bird[0] for bird in birds]
print(latinspecies)

commonname= [bird[1] for bird in birds]
print(commonname)
    
meanbodymass= [bird[2] for bird in birds]
print(meanbodymass)

# (2) Now do the same using conventional loops (you can choose to do this 
# before 1 !). 

latinspecies = []
for bird in birds:
    latinspecies.append(bird[0])
print("The latin names of the species are:", latinspecies)

commonname = []
for bird in birds:
    commonname.append(bird[1])
print("The common names are:", commonname)

meanbodymass = []
for bird in birds:
    meanbodymass.append(bird[2])
print("The mean body masses are", meanbodymass)


# A nice example out out is:
# Step #1:
# Latin names:
# ['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
# ... etc.
 
**********************************************************************

Testing lc1.py...

lc1.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 76.0

Output (only first 500 characters): 


**********************************************************************
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
[18.7, 19, 19.5, 19.6, 20.2]
The latin names of the species are: ['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
The common names are: ['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
The me
**********************************************************************

Code ran without errors

Time consumed = 0.02735s

======================================================================
Inspecting script file tuple.py...

File contents are:

**********************************************************************
birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
        )

# Birds is a tuple of tuples of length three: latin name, common name, mass.
# write a (short) script to print these on a separate line or output block by
# species 
# 
# A nice example output is:
# 
# Latin name: Passerculus sandwichensis Common name: Savannah sparrow Mass: 18.7
# ... etc.

for latin_name, common_name, mass in birds:
    print ("latin name: ", latin_name, "common name: ", common_name, "bird mass: ", mass)
**********************************************************************

Testing tuple.py...

tuple.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 74.0

Output (only first 500 characters): 


**********************************************************************
latin name:  Passerculus sandwichensis common name:  Savannah sparrow bird mass:  18.7
latin name:  Delichon urbica common name:  House martin bird mass:  19
latin name:  Junco phaeonotus common name:  Yellow-eyed junco bird mass:  19.5
latin name:  Junco hyemalis common name:  Dark-eyed junco bird mass:  19.6
latin name:  Tachycineata bicolor common name:  Tree swallow bird mass:  20.2

**********************************************************************

Code ran without errors

Time consumed = 0.02837s

======================================================================
Inspecting script file using_name.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
# Filename: using_name.py

if __name__ == '__main__':
    print('this program is being run by itself')
else:
    print('I am being imported from another script/program/module')

print ("this modules name is:" + __name__)

**********************************************************************

Testing using_name.py...

using_name.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 72.0

Output (only first 500 characters): 


**********************************************************************
this program is being run by itself
this modules name is:__main__

**********************************************************************

Code ran without errors

Time consumed = 0.02840s

======================================================================
Inspecting script file dictionary.py...

File contents are:

**********************************************************************
taxa = [ ('Myotis lucifugus','Chiroptera'),
         ('Gerbillus henleyi','Rodentia',),
         ('Peromyscus crinitus', 'Rodentia'),
         ('Mus domesticus', 'Rodentia'),
         ('Cleithrionomys rutilus', 'Rodentia'),
         ('Microgale dobsoni', 'Afrosoricida'),
         ('Microgale talazaci', 'Afrosoricida'),
         ('Lyacon pictus', 'Carnivora'),
         ('Arctocephalus gazella', 'Carnivora'),
         ('Canis lupus', 'Carnivora'),
        ]



# Write a python script to populate a dictionary called taxa_dic derived from
# taxa so that it maps order names to sets of taxa and prints it to screen.

#taxa_dict = dict(taxa)
#print(taxa_dict)

# An example output is:
#  
# 'Chiroptera' : set(['Myotis lucifugus']) ... etc. 
# OR, 
# 'Chiroptera': {'Myotis  lucifugus'} ... etc

"""make a dictionary 
of species in their orders"""

taxa_dict={}
for species, order in taxa:
        if order not in taxa_dict:
                taxa_dict[order]=set()
                taxa_dict[order].add(species)
        else:
                taxa_dict[order].add(species)
print(taxa_dict)
#### Your solution here #### 

# Now write a list comprehension that does the same (including the printing after the dictionary has been created)  
 
taxa_dict={}
{taxa_dict.setdefault(order, set()).add(species) for species, order in taxa}
print(taxa_dict)


**********************************************************************

Testing dictionary.py...

dictionary.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 72.0

Output (only first 500 characters): 


**********************************************************************
{'Chiroptera': {'Myotis lucifugus'}, 'Rodentia': {'Peromyscus crinitus', 'Gerbillus henleyi', 'Mus domesticus', 'Cleithrionomys rutilus'}, 'Afrosoricida': {'Microgale dobsoni', 'Microgale talazaci'}, 'Carnivora': {'Lyacon pictus', 'Arctocephalus gazella', 'Canis lupus'}}
{'Chiroptera': {'Myotis lucifugus'}, 'Rodentia': {'Peromyscus crinitus', 'Gerbillus henleyi', 'Mus domesticus', 'Cleithrionomys rutilus'}, 'Afrosoricida': {'Microgale dobsoni', 'Microgale talazaci'}, 'Carnivora': {'Lyacon pictus'
**********************************************************************

Code ran without errors

Time consumed = 0.03188s

======================================================================
======================================================================
Finished running scripts

Ran into 6 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 72.0

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!