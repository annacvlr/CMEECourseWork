##Performs variety of data manipulation tasks, focused on reading and writing CSV files, executing basic operations of matrices and demonstrating the differences between preallocating memory and dynamic growing vectors



write.csv(MyData, "../results/MyData.csv")
MyData <- read.csv("week3/data/trees.csv")
ls(pattern = "My*")
# checking if data appears
class(MyData)
head(MyData)
str(MyData)
MyData <- read.csv("week3/data/trees.csv", header = F) 
head(MyData)
MyData <- read.table("week3/data/trees.csv", sep = ',', header = TRUE)
head(MyData)
MyData <- read.table("week3/data/trees.csv", skip = 5)
head(MyData)
write.csv(MyData, "week3/results/MyData.csv")
dir("week3/results/")
write.table(MyData[1,], file = "week3/results/MyData.csv",append=TRUE)
write.csv(MyData, "week3/results/MyData.csv", row.names=TRUE) 
write.table(MyData, "week3/results/MyData.csv", col.names=FALSE) # ignore col names
MyData <- read.csv("../data/trees.csv", skip = 5) # skip first 5 lines
write.csv(MyData, "../results/MyData.csv")
dir("../results/") # Check if it worked
MyData <- read.csv("../data/trees.csv", header = TRUE)
write.csv(MyData, "../data/MyData.csv")
write.table(MyData[1,], file ="../results/MyData.csv", append =TRUE)
write.table(MyData, "../results/MyData.csv", col.names= FALSE) #ignore column names
source("basic_io.R")write.table(MyData, "../results/MyData.csv", col.names= FALSE) #ignore column names
source("basic_io.R")
write.table(MyData, "../results/MyData.csv", col.names= FALSE) #ignore column names
source("basic_io.R")
write.table(MyData, "../results/MyData.csv", col.names= FALSE) #ignore column names
source("basic_io.R")write.table(MyData, "../results/MyData.csv", col.names= FALSE) #ignore column names
source("basic_io.R")write.table(MyData, "../results/MyData.csv", col.names= FALSE) #ignore column names
source("basic_io.R")
source("../code/write.table(MyData, "../results/MyData.csv", col.names= FALSE) #ignore column namesbasic_io.R")
source("/week3/code/write.table(MyData, "../results/MyData.csv", col.names= FALSE) #ignore column namesbasic_io.R")
source("basic_io.R")
q()
M <- matrix(runif(1000000),1000,1000)

SumAllElements <- function(M) {
    Dimensions <- dim(M)
    Tot <- 0
    for (i in 1:Dimensions[1]) {
        for (j in 1:Dimensions [2]) {
            Tot <- Tot + M[i,j]
        }
    }
    return (Tot)
}

print("using loops, the time taken is:")
print(system.time(SumAllElements(M)))

print("using the in built vectorized function, the time taken is:")
print(system.time(sum(M)))

NoPreallocFunc <- function(x) {
    a <- vector() 
    for (i in 1:x) {
        a <- c(a,i_)
        print(a)
        print(object.size(a))
    }
}
system.time(NoPreallocFunc(10))
NoPreallocFunc <- function(x) {
    a <- vector() 
    for (i in 1:x) {
        a <- c(a,i)
        print(a)
        print(object.size(a))
    }
}
system.time(NoPreallocFunc(10))
system.time(PreallocFun(10))

PreallocFun <- function(x) {
    a <- rep(NA, x)
    for (i in 1:x) {
        a[i] <- i 
        print(a)
        print(object.size(a))

    }
}
system.time(PreallocFun(10))


NoPreallocFunc <- function(x) {
    a <- vector() 
    for (i in 1:x) {
        a <- c(a,i)
    }
}
system.time(NoPreallocFunc(10))

NoPreallocFunc <- function(x) {
    a <- vector() 
    for (i in 1:x) {
        a <- c(a,i)
    }
}
system.time(NoPreallocFunc(1000))


PreallocFun <- function(x) {
    a <- rep(NA, x)
    for (i in 1:x) {
        a[i] <- i 
      

    }
}
system.time(PreallocFun(1000))


NoPreallocFunc <- function(x) {
    a <- vector() 
    for (i in 1:x) {
        a <- c(a,i)
    }
}
system.time(NoPreallocFunc(1000))



PreallocFun <- function(x) {
    a <- rep(NA, x)
    for (i in 1:x) {
        a[i] <- i 
    }
}
system.time(PreallocFun(1000))
M <- matrix(rnorm(100),10,10)

RowMeans <- apply(M, 1, mean)
print(RowMeans)

#random matrix
M <- matrix(rnorm(100),10,10)


#mean of each row
RowMeans <- apply(M, 1, mean)
print(RowMeans)


RowVars <- apply(M, 1, var )
print (RowVars)
ColMeans <- apply(m, 2, mean)
print(ColMeans)
ColMeans <- apply(m, 2, mean)
print(ColMeans)
ColMeans <- apply(M, 2, mean)
print(ColMeans)
ColMeans <- apply(M, 2, mean)
print(ColMeans)
M <- matrix(rnorm(100),10,10)


#mean of each row
RowMeans <- apply(M, 1, mean)
print(RowMeans)

#variance
RowVars <- apply(M, 1, var )
print (RowVars)

#mean by column
ColMeans <- apply(M, 2, mean)
print(ColMeans)
#random matrix
M <- matrix(rnorm(100),10,10)


#mean of each row
RowMeans <- apply(M, 1, mean)
print(RowMeans)

#variance
RowVars <- apply(M, 1, var )
print (RowVars)

#mean by column
ColMeans <- apply(M, 2, mean)
print(ColMeans)
#random matrix
M <- matrix(rnorm(100),10,10)


#mean of each row
RowMeans <- apply(M, 1, mean)
print(RowMeans)

#variance
RowVars <- apply(M, 1, var )
print (RowVars)

#mean by column
ColMeans <- apply(M, 2, mean)
print(ColMeans)
#random matrix
M <- matrix(rnorm(100),10,10)


#mean of each row
RowMeans <- apply(M, 1, mean)
print(RowMeans)

#variance
RowVars <- apply(M, 1, var )
print (RowVars)

#mean by column
ColMeans <- apply(M, 2, mean)
print(ColMeans)
#random matrix
M <- matrix(rnorm(100),10,10)


#mean of each row
RowMeans <- apply(M, 1, mean)
print(RowMeans)

#variance
RowVars <- apply(M, 1, var )
print (RowVars)

#mean by column
ColMeans <- apply(M, 2, mean)
print(ColMeans)
#random matrix
M <- matrix(rnorm(100),10,10)


#mean of each row
RowMeans <- apply(M, 1, mean)
print(RowMeans)

#variance
RowVars <- apply(M, 1, var )
print (RowVars)

#mean by column
ColMeans <- apply(M, 2, mean)
print(ColMeans)
#random matrix
M <- matrix(rnorm(100),10,10)


#mean of each row
RowMeans <- apply(M, 1, mean)
print(RowMeans)

#variance
RowVars <- apply(M, 1, var )
print (RowVars)

#mean by column
ColMeans <- apply(M, 2, mean)
print(ColMeans)
#random matrix
M <- matrix(rnorm(100),10,10)


#mean of each row
RowMeans <- apply(M, 1, mean)
print(RowMeans)

#variance
RowVars <- apply(M, 1, var )
print (RowVars)

#mean by column
ColMeans <- apply(M, 2, mean)
print(ColMeans)
#random matrix
M <- matrix(rnorm(100),10,10)


#mean of each row
RowMeans <- apply(M, 1, mean)
print(RowMeans)

#variance
RowVars <- apply(M, 1, var )
print (RowVars)

#mean by column
ColMeans <- apply(M, 2, mean)
print(ColMeans)
#random matrix
M <- matrix(rnorm(100),10,10)


#mean of each row
RowMeans <- apply(M, 1, mean)
print(RowMeans)

#variance
RowVars <- apply(M, 1, var )
print (RowVars)

#mean by column
ColMeans <- apply(M, 2, mean)
print(ColMeans)
#random matrix
M <- matrix(rnorm(100),10,10)


#mean of each row
RowMeans <- apply(M, 1, mean)
print(RowMeans)

#variance
RowVars <- apply(M, 1, var )
print (RowVars)

#mean by column
ColMeans <- apply(M, 2, mean)
print(ColMeans)
#random matrix
M <- matrix(rnorm(100),10,10)


#mean of each row
RowMeans <- apply(M, 1, mean)
print(RowMeans)

#variance
RowVars <- apply(M, 1, var )
print (RowVars)

#mean by column
ColMeans <- apply(M, 2, mean)
print(ColMeans)
SomeOperation <- function(v) {
    if (sum(v) > 0) {
        return (v *100)
    } else {
        return (v)
    }
}

M <- matrix(rnorm(100), 10,10)
print(apply(M, 1, SomeOperation))
#### Vectorization example ####

# function: mean of sample size (n) from a population (popn) 
myexperiment <- function(popn, n) {
    pop_sample <- sample(popn, n, replace = FLASE)
    return(mean(pop_sample))
}
# function: mean of sample size (n) from a population (popn) 
myexperiment <- function(popn, n) {
    pop_sample <- sample(popn, n, replace = FLASE)
    return(mean(pop_sample))
}
myexperiment <- function(popn, n) {
    pop_sample <- sample(popn, n, replace = FALSE)
    return(mean(pop_sample))
}

# function: mean of sample size (n) from a population (popn) 
myexperiment <- function(popn, n) {
    pop_sample <- sample(popn, n, replace = FALSE)
    return(mean(pop_sample))
}


#for loop to calc mean of a vector without prealloc
loopy_sample1 <- function(popn, n, num) {
    result1 <- vector() 
    for (i in 1:num) {
        result1 <- c(result1, myexperiment(popn, n))
    }
    return(result1)
}
q()
